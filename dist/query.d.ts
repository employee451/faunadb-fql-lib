declare const query: {
    MapExtended: (collection: import("faunadb").ExprArg, lambdaExpr: string | number | boolean | import("faunadb").Expr | {
        [key: string]: any;
    } | import("faunadb").ExprVal[] | import("faunadb").Lambda) => import("faunadb").Expr;
    PaginateReverse: (set: import("faunadb").values.SetRef, opts: {}) => import("faunadb").Expr;
    Reverse: (arr: string | number | boolean | [] | import("faunadb").Expr | {
        [key: string]: any;
    }) => import("faunadb").Expr;
    Ref(ref: import("faunadb").ExprArg, id?: import("faunadb").ExprArg): import("faunadb").Expr;
    Bytes(bytes: string | number | boolean | ArrayBuffer | Uint8Array | import("faunadb").Expr | {
        [key: string]: any;
    } | import("faunadb").ExprVal[]): import("faunadb").Expr;
    Abort(msg: import("faunadb").ExprArg): import("faunadb").Expr;
    At(timestamp: import("faunadb").ExprArg, expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Let(vars: import("faunadb").ExprArg, in_expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Var(varName: import("faunadb").ExprArg): import("faunadb").Expr;
    If(condition: import("faunadb").ExprArg, then: import("faunadb").ExprArg, _else: import("faunadb").ExprArg): import("faunadb").Expr;
    Do(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Object(fields: import("faunadb").ExprArg): import("faunadb").Expr;
    Lambda(f: import("faunadb").Lambda): import("faunadb").Expr;
    Lambda(var_name: import("faunadb").ExprArg, expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Call(ref: import("faunadb").ExprArg, ...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Query(lambda: string | number | boolean | import("faunadb").Expr | {
        [key: string]: any;
    } | import("faunadb").ExprVal[] | import("faunadb").Lambda): import("faunadb").Expr;
    Map(collection: import("faunadb").ExprArg, lambda_expr: string | number | boolean | import("faunadb").Expr | {
        [key: string]: any;
    } | import("faunadb").ExprVal[] | import("faunadb").Lambda): import("faunadb").Expr;
    Merge(object: import("faunadb").ExprArg, values: import("faunadb").ExprArg, resolver?: import("faunadb").Expr | import("faunadb").Lambda): import("faunadb").Expr;
    Foreach(collection: import("faunadb").ExprArg, lambda_expr: string | number | boolean | import("faunadb").Expr | {
        [key: string]: any;
    } | import("faunadb").ExprVal[] | import("faunadb").Lambda): import("faunadb").Expr;
    Filter(collection: import("faunadb").ExprArg, lambda_expr: string | number | boolean | import("faunadb").Expr | {
        [key: string]: any;
    } | import("faunadb").ExprVal[] | import("faunadb").Lambda): import("faunadb").Expr;
    Take(number: import("faunadb").ExprArg, collection: import("faunadb").ExprArg): import("faunadb").Expr;
    Drop(number: import("faunadb").ExprArg, collection: import("faunadb").ExprArg): import("faunadb").Expr;
    Prepend(elements: import("faunadb").ExprArg, collection: import("faunadb").ExprArg): import("faunadb").Expr;
    Append(elements: import("faunadb").ExprArg, collection: import("faunadb").ExprArg): import("faunadb").Expr;
    IsEmpty(collection: import("faunadb").ExprArg): import("faunadb").Expr;
    IsNonEmpty(collection: import("faunadb").ExprArg): import("faunadb").Expr;
    IsNumber(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsDouble(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsInteger(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsBoolean(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsNull(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsBytes(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsTimestamp(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsDate(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsString(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsArray(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsObject(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsRef(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsSet(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsDoc(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsLambda(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsCollection(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsDatabase(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsIndex(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsFunction(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsKey(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsToken(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsCredentials(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    IsRole(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Get(ref: import("faunadb").ExprArg, ts?: import("faunadb").ExprArg): import("faunadb").Expr;
    KeyFromSecret(secret: import("faunadb").ExprArg): import("faunadb").Expr;
    Reduce(lambda: import("faunadb").ExprArg, initial: import("faunadb").ExprArg, collection: import("faunadb").ExprArg): import("faunadb").Expr;
    Paginate(set: import("faunadb").ExprArg, opts?: object): import("faunadb").Expr;
    Exists(ref: import("faunadb").ExprArg, ts?: import("faunadb").ExprArg): import("faunadb").Expr;
    Create(collection_ref: import("faunadb").ExprArg, params?: import("faunadb").ExprArg): import("faunadb").Expr;
    Update(ref: import("faunadb").ExprArg, params: import("faunadb").ExprArg): import("faunadb").Expr;
    Replace(ref: import("faunadb").ExprArg, params: import("faunadb").ExprArg): import("faunadb").Expr;
    Delete(ref: import("faunadb").ExprArg): import("faunadb").Expr;
    Insert(ref: import("faunadb").ExprArg, ts: import("faunadb").ExprArg, action: import("faunadb").ExprArg, params: import("faunadb").ExprArg): import("faunadb").Expr;
    Remove(ref: import("faunadb").ExprArg, ts: import("faunadb").ExprArg, action: import("faunadb").ExprArg): import("faunadb").Expr;
    CreateClass(params: import("faunadb").ExprArg): import("faunadb").Expr;
    CreateCollection(params: import("faunadb").ExprArg): import("faunadb").Expr;
    CreateDatabase(params: import("faunadb").ExprArg): import("faunadb").Expr;
    CreateIndex(params: import("faunadb").ExprArg): import("faunadb").Expr;
    CreateKey(params: import("faunadb").ExprArg): import("faunadb").Expr;
    CreateFunction(params: import("faunadb").ExprArg): import("faunadb").Expr;
    CreateRole(params: import("faunadb").ExprArg): import("faunadb").Expr;
    Singleton(ref: import("faunadb").ExprArg): import("faunadb").Expr;
    Events(ref_set: import("faunadb").ExprArg): import("faunadb").Expr;
    Match(index: import("faunadb").ExprArg, ...terms: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Union(...sets: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Intersection(...sets: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Difference(...sets: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Distinct(set: import("faunadb").ExprArg): import("faunadb").Expr;
    Join(source: import("faunadb").ExprArg, target: string | number | boolean | import("faunadb").Expr | {
        [key: string]: any;
    } | import("faunadb").ExprVal[] | import("faunadb").Lambda): import("faunadb").Expr;
    Range(set: import("faunadb").ExprArg, from: import("faunadb").ExprArg, to: import("faunadb").ExprArg): import("faunadb").Expr;
    Login(ref: import("faunadb").ExprArg, params: import("faunadb").ExprArg): import("faunadb").Expr;
    Logout(delete_tokens: import("faunadb").ExprArg): import("faunadb").Expr;
    Identify(ref: import("faunadb").ExprArg, password: import("faunadb").ExprArg): import("faunadb").Expr;
    Identity(): import("faunadb").Expr;
    HasIdentity(): import("faunadb").Expr;
    Concat(strings: import("faunadb").ExprArg, separator?: import("faunadb").ExprArg): import("faunadb").Expr;
    Casefold(string: import("faunadb").ExprArg, normalizer?: import("faunadb").ExprArg): import("faunadb").Expr;
    ContainsStr(value: import("faunadb").ExprArg, search: import("faunadb").ExprArg): import("faunadb").Expr;
    ContainsStrRegex(value: import("faunadb").ExprArg, pattern: import("faunadb").ExprArg): import("faunadb").Expr;
    StartsWith(value: import("faunadb").ExprArg, search: import("faunadb").ExprArg): import("faunadb").Expr;
    EndsWith(value: import("faunadb").ExprArg, search: import("faunadb").ExprArg): import("faunadb").Expr;
    RegexEscape(value: import("faunadb").ExprArg): import("faunadb").Expr;
    FindStr(value: import("faunadb").ExprArg, find: import("faunadb").ExprArg, start?: import("faunadb").ExprArg): import("faunadb").Expr;
    FindStrRegex(value: import("faunadb").ExprArg, find: import("faunadb").ExprArg, start?: import("faunadb").ExprArg, numResults?: import("faunadb").ExprArg): import("faunadb").Expr;
    Length(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    LowerCase(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    LTrim(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    NGram(terms: import("faunadb").ExprArg, min?: import("faunadb").ExprArg, max?: import("faunadb").ExprArg): import("faunadb").Expr;
    Repeat(expr: import("faunadb").ExprArg, number?: import("faunadb").ExprArg): import("faunadb").Expr;
    ReplaceStr(expr: import("faunadb").ExprArg, find: import("faunadb").ExprArg, replace: import("faunadb").ExprArg): import("faunadb").Expr;
    ReplaceStrRegex(expr: import("faunadb").ExprArg, find: import("faunadb").ExprArg, replace: import("faunadb").ExprArg, first?: import("faunadb").ExprArg): import("faunadb").Expr;
    RTrim(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Space(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    SubString(expr: import("faunadb").ExprArg, start?: import("faunadb").ExprArg, length?: import("faunadb").ExprArg): import("faunadb").Expr;
    TitleCase(value: import("faunadb").ExprArg): import("faunadb").Expr;
    Trim(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    UpperCase(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Format(string: import("faunadb").ExprArg, values: import("faunadb").ExprArg): import("faunadb").Expr;
    Time(string: import("faunadb").ExprArg): import("faunadb").Expr;
    Epoch(number: import("faunadb").ExprArg, unit: import("faunadb").ExprArg): import("faunadb").Expr;
    TimeAdd(base: import("faunadb").ExprArg, offset: import("faunadb").ExprArg, unit: import("faunadb").ExprArg): import("faunadb").Expr;
    TimeSubtract(base: import("faunadb").ExprArg, offset: import("faunadb").ExprArg, unit: import("faunadb").ExprArg): import("faunadb").Expr;
    TimeDiff(start: import("faunadb").ExprArg, finish: import("faunadb").ExprArg, unit: import("faunadb").ExprArg): import("faunadb").Expr;
    Date(string: import("faunadb").ExprArg): import("faunadb").Expr;
    Now(): import("faunadb").Expr;
    DayOfWeek(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    DayOfYear(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    DayOfMonth(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Hour(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Minute(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Second(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Year(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Month(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    NextId(): import("faunadb").Expr;
    NewId(): import("faunadb").Expr;
    Database(name: import("faunadb").ExprArg, scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Index(name: import("faunadb").ExprArg, scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Class(name: import("faunadb").ExprArg, scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Collection(name: import("faunadb").ExprArg, scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Function(name: import("faunadb").ExprArg, scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Role(name: import("faunadb").ExprArg, scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Databases(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Classes(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Collections(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Indexes(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Functions(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Roles(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Keys(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Tokens(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Credentials(scope?: import("faunadb").ExprArg): import("faunadb").Expr;
    Equals(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Contains(path: import("faunadb").ExprArg, _in: import("faunadb").ExprArg): import("faunadb").Expr;
    Select(path: import("faunadb").ExprArg, from: import("faunadb").ExprArg, _default?: import("faunadb").ExprArg): import("faunadb").Expr;
    SelectAll(path: import("faunadb").ExprArg, from: import("faunadb").ExprArg): import("faunadb").Expr;
    Abs(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Add(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    BitAnd(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    BitNot(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    BitOr(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    BitXor(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Ceil(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Divide(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Floor(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Max(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Min(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Modulo(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Multiply(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Round(value: import("faunadb").ExprArg, precision?: import("faunadb").ExprArg): import("faunadb").Expr;
    Subtract(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Sign(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Sqrt(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Trunc(value: import("faunadb").ExprArg, precision?: import("faunadb").ExprArg): import("faunadb").Expr;
    Count(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Sum(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Mean(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Any(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    All(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Acos(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Asin(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Atan(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Cos(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Cosh(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Degrees(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Exp(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Hypot(value: import("faunadb").ExprArg, exp?: import("faunadb").ExprArg): import("faunadb").Expr;
    Ln(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Log(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Pow(value: import("faunadb").ExprArg, exp?: import("faunadb").ExprArg): import("faunadb").Expr;
    Radians(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Sin(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Sinh(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Tan(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    Tanh(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    LT(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    LTE(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    GT(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    GTE(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    And(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Or(...args: import("faunadb").ExprArg[]): import("faunadb").Expr;
    Not(bool: import("faunadb").ExprArg): import("faunadb").Expr;
    ToString(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToNumber(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToObject(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToArray(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToDouble(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToInteger(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToTime(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToDate(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToSeconds(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToMillis(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    ToMicros(expr: import("faunadb").ExprArg): import("faunadb").Expr;
    MoveDatabase(from: import("faunadb").ExprArg, to: import("faunadb").ExprArg): import("faunadb").Expr;
    Documents(collection: import("faunadb").ExprArg): import("faunadb").Expr;
};
export { query };
