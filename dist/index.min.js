(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('faunadb')) :
    typeof define === 'function' && define.amd ? define(['exports', 'faunadb'], factory) :
    (global = global || self, factory(global.faunaFqlLib = {}, global.faunadb));
}(this, (function (exports, faunadb) { 'use strict';

    const MapExtended = (collection, lambdaExpr) => faunadb.query.If(faunadb.query.IsArray(collection), faunadb.query.Map(faunadb.query.Select(["data"], collection), lambdaExpr), faunadb.query.Let({
        data: faunadb.query.Map(faunadb.query.Select(["data"], collection), lambdaExpr),
    }, faunadb.query.Merge(collection, { data: faunadb.query.Var("data") })));

    const Reverse = (arr) => faunadb.query.Reduce(faunadb.query.Lambda(["acc", "val"], faunadb.query.Append(faunadb.query.Var("acc"), [faunadb.query.Var("val")])), [], arr);

    const PaginateReverse = (set, opts) => faunadb.query.Let({
        after: faunadb.query.Select(["before"], opts, null),
        before: faunadb.query.Select(["after"], opts, null),
        size: faunadb.query.Select(["size"], opts, 64),
        result: faunadb.query.If(faunadb.query.And(faunadb.query.IsNull(faunadb.query.Var("after")), faunadb.query.IsNull(faunadb.query.Var("before"))), faunadb.query.Paginate(set, { before: [null], size: faunadb.query.Var("size") }), faunadb.query.If(faunadb.query.IsNull(faunadb.query.Var("after")), faunadb.query.Paginate(set, {
            before: faunadb.query.Var("before"),
            size: faunadb.query.Var("size"),
        }), faunadb.query.Paginate(set, {
            after: faunadb.query.Var("after"),
            size: faunadb.query.Var("size"),
        }))),
    }, faunadb.query.Let({
        dataObj: {
            data: Reverse(faunadb.query.Select(["data"], faunadb.query.Var("result"))),
        },
        afterObj: faunadb.query.If(faunadb.query.Contains(["before"], faunadb.query.Var("result")), { after: faunadb.query.Select(["before"], faunadb.query.Var("result")) }, {}),
        beforeObj: faunadb.query.If(faunadb.query.Or(faunadb.query.Not(faunadb.query.Contains(["after"], faunadb.query.Var("result"))), faunadb.query.Equals([null], faunadb.query.Select(["after"], faunadb.query.Var("result"), null))), {}, { before: faunadb.query.Select(["after"], faunadb.query.Var("result")) }),
    }, faunadb.query.Merge(faunadb.query.Merge(faunadb.query.Var("afterObj"), faunadb.query.Var("beforeObj")), faunadb.query.Var("dataObj"))));

    exports.MapExtended = MapExtended;
    exports.PaginateReverse = PaginateReverse;
    exports.Reverse = Reverse;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
